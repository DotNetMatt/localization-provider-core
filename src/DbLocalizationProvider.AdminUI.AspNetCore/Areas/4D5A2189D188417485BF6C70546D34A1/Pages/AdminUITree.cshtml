@page "{handler?}"

@using DbLocalizationProvider.AdminUI.AspNetCore
@using DbLocalizationProvider.AspNetCore
@using Microsoft.AspNetCore.Mvc.Localization

@model DbLocalizationProvider.AdminUI.AspNetCore.Areas._4D5A2189D188417485BF6C70546D34A1.Pages.AdminUITreeViewModel

@inject IHtmlLocalizer<Resources> Localizer
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@Localizer.GetString(_ => _.Title)</title>
    <link rel="stylesheet" href="../res/node_modules.bootstrap.dist.css.bootstrap.min.css">
    <link rel="stylesheet" href="../res/node_modules.vue_directive_tooltip.css.index.min.css">
    <link rel="stylesheet" href="../res/node_modules.vue_ads_table_tree.dist.vue-ads-table-tree.css">
    <link rel="stylesheet" href="../res/node_modules._fortawesome.fontawesome_free.css.all.min.css">
    <style type="text/css">
        body {
            margin: 10px;
        }

        h1 {
            font-size: 24px;
        }

        [v-cloak] {
            display: none;
        }

        textarea {
            width: 100%;
            -moz-box-sizing: border-box;
            -webkit-box-sizing: border-box;
            -ms-box-sizing: border-box;
            box-sizing: border-box;
        }

        .full-width-tooltip {
            max-width: 1200px;
        }

        .dropdown-item-checked::before {
            position: absolute;
            left: .4rem;
            content: '✓';
            font-weight: 600;
        }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, .5);
            display: table;
            transition: opacity .3s ease;
        }

        .modal-wrapper {
            display: table-cell;
            vertical-align: middle;
        }

        .modal-container {
            width: 750px;
            margin: 0 auto;
            padding: 20px 30px;
            background-color: #fff;
            border-radius: 2px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, .33);
            transition: all .3s ease;
            font-family: Helvetica, Arial, sans-serif;
        }

        .modal-header h3 {
            margin-top: 0;
            color: #42b983;
        }

        .modal-body {
            margin: 20px 0;
        }

        .modal-default-button {
            float: right;
        }

        .modal-enter, .modal-leave {
            opacity: 0;
        }

        .modal-enter .modal-container,
        .modal-leave .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }

        .translation {
            color: blue;
            text-decoration: underline;
            cursor: pointer;
        }

        .translation.empty {
            color: red;
            text-decoration-style: dotted;
        }
    </style>
    <style type="text/css">
        tr th.vue-ads-cursor-pointer {
            background-color: gray;
        }

        .parent-row {
            background-color: red
        }
    </style>

    @if(!string.IsNullOrEmpty(UiConfigurationContext.Current.CustomCssPath))
    {
        <link rel="stylesheet" href="@UiConfigurationContext.Current.CustomCssPath">
    }

</head>
<body class="container-fluid">

<div id="app">
    <div class="mb-6">
      <button @@click="doFiltering">Do filtering</button>
        <vue-ads-table-tree
            :columns="columns"
            :rows="rows"
            :filter="filter"
            :page="page"
            @@filter-change="filterChanged"
            @@page-change="pageChanged">
            <template slot="bottom">&nbsp;</template>
            <template slot="no-rows">There are no resources registered. Make sure you sync them up!</template>
            <template slot="resourceKey" slot-scope="props">{{ props.row.resourceKey }}</template>
            <template
                v-for="columnName in slottedColumns"
                :slot="columnName"
                slot-scope="props">
                <a href="#" v-show="typeof(props.row[props.column.property]) !== 'undefined' && props.row[props.column.property].trim() != ''">{{ props.row[props.column.property] }}</a>
                <a href="#" v-show="props.row[props.column.property] != null && props.row[props.column.property].trim() == ''">@Localizer.GetString(_ => _.EmptyTranslation)</a>
                <a href="#" v-show="typeof(props.row[props.column.property]) !== 'undefined' && (props.row[props.column.property] == null || props.row[props.column.property] == '')">N/A</a>
            </template>
        </vue-ads-table-tree>
    </div>
</div>

<script src="../res/node_modules.vue.dist.vue.min.js"></script>
<script src="../res/node_modules.axios.dist.axios.min.js"></script>
<script src="../res/node_modules.vue_ads_table_tree.dist.vue-ads-table-tree.umd.min.js"></script>

<script type="text/javascript">
const VueAdsTableTree = window["vue-ads-table-tree"].default;
const columnConfig = [
    {
        property: 'resourceKey',
        title: 'Resource Key',
        direction: null,
        filterable: true,
        collapseIcon: true
    },
    {
        property: 'translationEn',
        title: 'Translation English',
        direction: null,
        filterable: true
    },
    {
        property: 'translationNo',
        title: 'Translation Nork',
        direction: null,
        filterable: true
    }
];

new Vue({
    el: "#app",

    components: {
        VueAdsTableTree
    },

    data() {
        return {
            page: 0,
            filter: '',
            slottedColumns: [
                'translationEn',
                'translationNo',
                'translationLv'
            ],
            columns: columnConfig,
            rows: [],
            classes: {
                '0': {
                    'vue-ads-bg-gray-lighter': false,
                    'vue-ads-bg-blue-dark': true,
                    'vue-ads-text-white': true,
                    'vue-ads-font-bold': true,
                },
                '1_/': {
                    'hover:vue-ads-bg-red-lighter': true
                }
            }
        };
    },

    mounted: function() {
        axios.get('../api/service/gettree').then((response) => {
            var result = response.data;

            this.rows = result.resources;

            //this.model.resources = result.resources;
            //this.model.supportedLanguages = result.languages;
            //this.model.loading = false;
            //this.model.options = result.options;
        }).catch(function(error) { alert('error retrieving resources: ' + error); });
    },

    methods: {
        filterChanged (filter) {
            this.filter = filter;
        },

        pageChanged (page) {
            this.page = page;
        },

        doFiltering () {
            this.rows = [
                {
                    resourceKey: 'MyNaspace',
                    _children: [
                        {
                            resourceKey: 'MyClassName',
                            _children: [
                                {
                                    resourceKey: 'MyProperty2',
                                    translationEn: null,
                                }
                            ]
                        }
                    ]
                }
            ];
        }
    }
});
</script>
</body>
</html>
